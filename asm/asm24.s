
	thumb_local_start
sub_808BEFC:
	push {lr}
	bl sub_8005D88
	mov r0, #0
	pop {pc}
	.balign 4, 0
	.byte 0x0, 0xC0, 0xF9, 0x40, 0xFF, 0x0, 0x0, 0x8, 0x3F, 0x0, 0x6, 0x3E
	.byte 0x74, 0xBF, 0x7B, 0x88, 0x2, 0xFF, 0x1, 0x54, 0x0, 0x8, 0xBF, 0x8
	.byte 0x8, 0x4A, 0x2, 0xD0, 0xF8, 0x6, 0x8, 0x3F, 0x34, 0x3F, 0x1C, 0x2
	.byte 0xFF, 0x1E, 0x27, 0xFF, 0x0, 0x8, 0x7, 0x14
	.word dword_808BF8C
	.byte 0x2, 0xFF, 0x1E, 0x3A, 0xFF, 0x0, 0x4, 0x80, 0x2, 0xFF, 0x3C
byte_808BF43: .byte 0x14, 0x0, 0x0, 0x0, 0x0, 0x27, 0xFF, 0xC, 0x8, 0x7, 0x6A, 0x8, 0x4A
	.byte 0x3, 0x54, 0x1, 0x3B, 0x40, 0x4, 0xFF, 0x4, 0x47, 0x0, 0xFF, 0x4, 0x41
	.byte 0x0, 0xFF, 0x1, 0xC0, 0xF9, 0x40, 0xFF, 0x0, 0x0, 0x3F, 0x30, 0x29, 0xFF
	.byte 0x4D, 0x8, 0x29, 0xFF, 0x4F, 0x8, 0x29, 0xFF, 0x51, 0x8, 0x29, 0xFF, 0x53
	.byte 0x8, 0x29, 0xFF, 0x55, 0x8, 0x2, 0xFF, 0x3C, 0x4E, 0xFF, 0xFF, 0x27, 0xFF
	.byte 0x8, 0x8, 0x7, 0x3F, 0x18, 0x3F, 0x4, 0x0
dword_808BF8C: .word 0x1540003C
	.word byte_808BF43
	.byte 0x3F, 0x0, 0x6, 0x2, 0xFF, 0x1E, 0x3E, 0xC0, 0xC0, 0x7B
	.byte 0x88, 0x47, 0x0, 0xFF, 0x4, 0x40, 0x4, 0xFF, 0x4, 0x3F
	.byte 0x1C, 0x14, 0xF9, 0xBF, 0x8, 0x8, 0x2, 0xFF, 0x1E, 0x3A
	.byte 0xFF, 0x0, 0x4, 0x80, 0x2, 0xFF, 0x1E, 0x14, 0x0, 0x0
	.byte 0x0, 0x0, 0x27, 0xFF, 0xC, 0x8, 0x7, 0x4A, 0x3, 0x54
	.byte 0x1, 0x3B, 0x40, 0x4, 0xFF, 0x4, 0x47, 0x0, 0xFF, 0x4
	.byte 0x41, 0x0, 0xFF, 0x1, 0x60, 0xC, 0xA0, 0xF5, 0x0, 0x2
	.byte 0x3F, 0x30, 0x29, 0xFF, 0x61, 0x9, 0x29, 0xFF, 0x60, 0x9
	.byte 0x4B, 0xCD, 0x2E, 0x14, 0x8, 0x2, 0xFF, 0x3C, 0x4E, 0xFF
	.byte 0xFF, 0x27, 0xFF, 0x8, 0x8, 0x7, 0x3F, 0x18, 0x3F, 0x4
	.byte 0x0, 0x3C, 0x0, 0x40, 0x15, 0xB9, 0xBF, 0x8, 0x8, 0x0
	.byte 0x0, 0x0
byte_808C004: .byte 0x3F, 0x0, 0x6, 0x2, 0xFF, 0x5A, 0x27, 0xFF, 0xC, 0x8, 0x7, 0x3E
	.byte 0xEC, 0xC3, 0x7B, 0x88, 0x63, 0x2A, 0xFF, 0x61, 0x9, 0x2A, 0xFF, 0x60
	.byte 0x9, 0x4A, 0x3, 0x4A, 0x1, 0x20, 0x4A, 0x4, 0x47, 0x0, 0xFF, 0x4
	.byte 0x40, 0x4, 0xFF, 0x4, 0x3F, 0x1C, 0x2, 0xFF, 0x1E, 0x27, 0xFF, 0x8
	.byte 0x8, 0x7, 0x14, 0x7A, 0xC0, 0x8, 0x8, 0x2, 0xFF, 0x1E, 0x3A, 0xFF
	.byte 0x0, 0x4, 0x80, 0x2, 0xFF, 0x1E, 0x14, 0x0, 0x0, 0x0, 0x0, 0x27
	.byte 0xFF, 0xC, 0x8, 0x7, 0x29, 0xFF, 0x50, 0x8, 0x29, 0xFF, 0x6E, 0x9
	.byte 0x4B, 0x2D, 0x31, 0x14, 0x8, 0x54, 0x1, 0x3B, 0x40, 0x4, 0xFF, 0x4
	.byte 0x47, 0x0, 0xFF, 0x4, 0x3F, 0x30, 0x2, 0xFF, 0x3C, 0x4E, 0xFF, 0xFF
	.byte 0x27, 0xFF, 0x8, 0x8, 0x7, 0x3F, 0x18, 0x3F, 0x4, 0x0, 0x3C, 0x0
	.byte 0x40, 0x15, 0x46, 0xC0, 0x8, 0x8, 0x0, 0x0, 0x3F, 0x0, 0x6, 0x2
	.byte 0xFF, 0x1E, 0x3E, 0xC4, 0xC4, 0x7B, 0x88, 0x47, 0x0, 0xFF, 0x4, 0x40
	.byte 0x4, 0xFF, 0x4, 0x3F, 0x1C, 0x14, 0xE9, 0xC0, 0x8, 0x8, 0x2, 0xFF
	.byte 0x1E, 0x3A, 0xFF, 0x0, 0x4, 0x80, 0x2, 0xFF, 0x1E, 0x14, 0x0, 0x0
	.byte 0x0, 0x0, 0x27, 0xFF, 0xC, 0x8, 0x7, 0x4A, 0x3, 0x54, 0x1, 0x3B
	.byte 0x40, 0x4, 0xFF, 0x4, 0x47, 0x0, 0xFF, 0x4, 0x41, 0x0, 0xFF, 0x1
	.byte 0x80, 0xDF, 0x40, 0xFF, 0x0, 0x0, 0x3F, 0x30, 0x29, 0xFF, 0x61, 0x9
	.byte 0x29, 0xFF, 0x60, 0x9, 0x4B, 0xCD, 0x2E, 0x14, 0x8, 0x2, 0xFF, 0x3C
	.byte 0x4E, 0xFF, 0xFF, 0x27, 0xFF, 0x8, 0x8, 0x7, 0x3F, 0x18, 0x3F, 0x4
	.byte 0x0, 0x3C, 0x0, 0x40, 0x15, 0xA9, 0xC0, 0x8, 0x8, 0x0, 0x0, 0x0
byte_808C0F4: .byte 0x3F, 0x0, 0x6, 0x2, 0xFF, 0x5A, 0x27, 0xFF, 0xC, 0x8, 0x7, 0x3E
	.byte 0x8C, 0xC5, 0x7B, 0x88, 0x63, 0x2A, 0xFF, 0x61, 0x9, 0x2A, 0xFF, 0x60
	.byte 0x9, 0x4A, 0x3, 0x4A, 0x1, 0x20, 0x4A, 0x4, 0x47, 0x0, 0xFF, 0x4
	.byte 0x40, 0x4, 0xFF, 0x4, 0x3F, 0x1C, 0x2, 0xFF, 0x1E, 0x27, 0xFF, 0x8
	.byte 0x8, 0x7, 0x14, 0x80, 0xC1, 0x8, 0x8, 0x2, 0xFF, 0x1E, 0x3A, 0xFF
	.byte 0x0, 0x4, 0x80, 0x2, 0xFF, 0xA, 0x49, 0x10, 0x0, 0x0, 0x0, 0x0
	.byte 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x47, 0x1, 0xFF, 0x21, 0x4D
	.byte 0x76, 0x0, 0x2, 0xFF, 0x1E
byte_808C14D: .byte 0x14, 0x0, 0x0, 0x0, 0x0, 0x27, 0xFF, 0x4, 0x10, 0x7, 0x2A, 0xFF
	.byte 0x15, 0x17, 0x49, 0x30, 0x29, 0xFF, 0x54, 0x8, 0x29, 0xFF, 0x1F, 0x1
	.byte 0x29, 0xFF, 0x6F, 0x9, 0x4B, 0x2D, 0x31, 0x14, 0x8, 0x2, 0xFF, 0x1E
	.byte 0x28, 0x0, 0x10, 0x4C, 0x1, 0x1, 0x88, 0xC1, 0x8, 0x8, 0x3F, 0x18
	.byte 0x3F, 0x4, 0x0, 0x3C, 0x0, 0x40, 0x15
	.word byte_808C14D
	.byte 0x0, 0x0, 0x0, 0x4, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0
	.byte 0xA0, 0xFF, 0x20, 0x0, 0x0, 0x1, 0x8, 0x3F, 0x0, 0x6, 0x3E, 0x60, 0xC6, 0x7B, 0x88, 0x2, 0xFF
	.byte 0x1, 0x54, 0x0, 0x98, 0xC1, 0x8, 0x8, 0x4A, 0x2, 0x64, 0xEE, 0x5, 0x8, 0x3F, 0x34, 0x3F, 0x1C
	.byte 0x2, 0xFF, 0x1E, 0x27, 0xFF, 0x8, 0x8, 0x7, 0x14
	.word dword_808C228
	.byte 0x2, 0xFF, 0x1E, 0x3A, 0xFF, 0x0, 0x4, 0x80, 0x2, 0xFF, 0x3C
byte_808C1D3: .byte 0x14, 0x0, 0x0, 0x0, 0x0, 0x27, 0xFF, 0xC, 0x8, 0x7, 0x76, 0x0, 0x8
	.byte 0x76, 0x1, 0x0, 0x2A, 0xFF, 0x5F, 0x8, 0x29, 0xFF, 0x60, 0x8, 0x2A, 0xFF
	.byte 0x1F, 0x1, 0x2A, 0xFF, 0x15, 0x17, 0x4A, 0x3, 0x54, 0x1, 0x3B, 0x40, 0x4
	.byte 0xFF, 0x7, 0x47, 0x0, 0xFF, 0x7, 0x41, 0x0, 0xFF, 0x1, 0xA0, 0xFF, 0xE0
	.byte 0x0, 0x0, 0x1, 0x3F, 0x30, 0x29, 0xFF, 0xE9, 0x0, 0x6C, 0x14, 0x2, 0x14
	.byte 0x0, 0x3, 0x0, 0x0, 0x0, 0x2, 0xFF, 0x3C, 0x4C, 0x0, 0x0, 0x30, 0xC2
	.byte 0x8, 0x8, 0x3F, 0x18, 0x3F, 0x4, 0x0
dword_808C228: .word 0x1540003C
	.word byte_808C1D3
	.byte 0x4, 0x0, 0x0, 0x7, 0x0, 0x0, 0xFA, 0xFF, 0x0, 0x0, 0xE, 0x0, 0x0, 0x0, 0x10
	.byte 0x0, 0x0, 0xA0, 0xFF, 0x20, 0x0, 0x0, 0x1, 0x8
byte_808C248: .byte 0x3F, 0x0, 0x6, 0x2, 0xFF, 0x1E, 0x27, 0xFF, 0xC, 0x8, 0x7, 0x3E
	.byte 0xC8, 0xC8, 0x7B, 0x88, 0x54, 0x0, 0x40, 0xC2, 0x8, 0x8, 0x4A, 0x2
	.byte 0xAC, 0xEE, 0x5, 0x8, 0x3F, 0x34,0x3F, 0x1C, 0x2, 0xFF, 0x1E, 0x27
	.byte 0xFF, 0x8, 0x8, 0x7, 0x14, 0xC5, 0xC2, 0x8, 0x8, 0x2, 0xFF, 0x1E
	.byte 0x3A, 0xFF, 0x0, 0x4, 0x80, 0x2, 0xFF, 0x3C, 0x14, 0x0, 0x0, 0x0
	.byte 0x0, 0x27, 0xFF, 0xC, 0x8, 0x7, 0x76, 0x0, 0x0, 0x76, 0x1, 0x8
	.byte 0x2A, 0xFF, 0x15, 0x17, 0x29, 0xFF, 0x5F, 0x8, 0x4A, 0x3, 0x54, 0x1
	.byte 0x3B, 0x40, 0x4, 0xFF, 0x7, 0x47, 0x0, 0xFF, 0x7, 0x41, 0x0, 0xFF
	.byte 0x1, 0xA0, 0xFF, 0xE0, 0x0, 0x0, 0x1, 0x3F, 0x30, 0x29, 0xFF, 0x4B
	.byte 0x8, 0x2, 0xFF, 0x3C, 0x4E, 0xFF, 0xFF, 0x27, 0xFF, 0x8, 0x8, 0x7
	.byte 0x3F, 0x18, 0x3F, 0x4, 0x0, 0x3C, 0x0, 0x40, 0x15, 0x80, 0xC2, 0x8
	.byte 0x8, 0x0, 0x0, 0x0, 0x92, 0x0, 0x0, 0x0, 0x0, 0x0, 0xD0, 0x0
	.byte 0x0, 0x0, 0x50, 0xFF, 0x0, 0x0, 0x20, 0x0
byte_808C2E0: .byte 0x92, 0x1, 0x0, 0x1, 0x0, 0x0, 0xF8, 0xFD, 0x0, 0x0, 0xF4, 0xFF
	.byte 0x0, 0x0, 0x0, 0x0
byte_808C2F0: .byte 0x3F, 0x0, 0x6, 0x29, 0xFF, 0x31, 0x17, 0x47, 0x1, 0xFF
	.byte 0x0, 0x47, 0x0, 0xFF, 0x32, 0x4D, 0xA5, 0x1, 0x4B, 0x79
	.byte 0xC3, 0x8, 0x8, 0x4B, 0xD9, 0x32, 0x14, 0x8, 0x5, 0xC0
	.byte 0x47, 0x1, 0xFF, 0x0, 0x3F, 0x4, 0x0, 0x3F, 0x0, 0x6
	.byte 0x3E, 0xEC, 0xD, 0x7E, 0x8, 0x1C, 0x4, 0x0
	.word byte_808C32B
	.byte 0x1C, 0x4, 0x1, 0x36, 0xC3, 0x8, 0x8
byte_808C32B: .byte 0x4C, 0x20, 0xD0, 0xC2, 0x8, 0x8, 0x15, 0x41, 0xC3, 0x8
	.byte 0x8, 0x4C, 0x20
	.word byte_808C2E0
	.byte 0x15, 0x41, 0xC3, 0x8, 0x8, 0x40, 0x4, 0xFF, 0x4, 0x47, 0x0
	.byte 0xFF, 0x4, 0x2, 0xFF, 0x1E, 0x3A, 0xFF, 0x0, 0x4, 0x80, 0x2
	.byte 0xFF, 0x1E, 0x14, 0x0, 0x0, 0x0, 0x0, 0x27, 0xFF, 0xC, 0x8
	.byte 0x7, 0x29, 0xFF, 0x60, 0x9, 0x3B, 0x2, 0xFF, 0x3C, 0x4C, 0x80
	.byte 0x0, 0x0, 0x0, 0x0, 0x0, 0x15, 0x72, 0xC3, 0x8, 0x8, 0x3F
	.byte 0x4, 0x0, 0x0, 0x0, 0x0
	thumb_func_end sub_808BEFC

	thumb_local_start
sub_808C378:
	push {r4-r7,lr}
	mov r0, #0x70 
	add r7, r5, r0
	ldrb r0, [r5,#4]
	tst r0, r0
	bne loc_808C398
	mov r0, #1
	strb r0, [r5,#4]
	mov r0, #0
	str r0, [r7,#4]
	mvn r0, r0
	str r0, [r7,#0xc]
	ldr r0, off_808C404 // =0x3c 
	str r0, [r7]
	mov r0, #0xc
	str r0, [r7,#8]
loc_808C398:
	ldr r0, [r7,#4]
	sub r0, #1
	str r0, [r7,#4]
	bgt loc_808C3DE
	mov r0, #1
	str r0, [r7,#4]
	push {r4-r7}
	bl ReadOWPlayerObjectCoords
	mov r4, #0x10
	lsl r4, r4, #0x10
	add r2, r2, r4
	mov r3, r2
	mov r2, r1
	mov r1, r0
	mov r4, #0x20 
	lsl r4, r4, #8
	add r4, #8
	lsl r4, r4, #8
	push {r1-r7}
loc_808C3C0:
	bl GetRNG // () -> int
	mov r1, #0xff
	and r0, r1
	lsr r1, r0, #5
	ldr r2, [r7,#0xc]
	cmp r1, r2
	beq loc_808C3C0
	str r1, [r7,#0xc]
	pop {r1-r7}
	add r4, r4, r0
	mov r0, #0x17
	bl SpawnOverworldMapObject
	pop {r4-r7}
loc_808C3DE:
	ldr r0, [r7]
	sub r0, #1
	str r0, [r7]
	ldr r0, [r7,#8]
	sub r0, #1
	blt loc_808C3EE
	str r0, [r7,#8]
	b loc_808C3F2
loc_808C3EE:
	bl sub_8143294
loc_808C3F2:
	mov r0, #0
	mov r1, #1
	bl camera_initShakeEffect_80302a8
	ldr r0, [r7]
	tst r0, r0
	pop {r4-r7,pc}
	.word 0x70
	.balign 4, 0
off_808C404: .word 0x3C
	.byte 0x0, 0x0, 0xE3, 0x0, 0x6, 0x0, 0x0, 0x8, 0x0, 0xA0, 0xDC, 0x60, 0x4
	.byte 0x0, 0x0, 0x8, 0x0, 0xA0, 0xE2, 0x80, 0x12, 0x0, 0x0, 0x8
byte_808C420: .byte 0x0, 0xA0, 0xF5, 0x60, 0x1F, 0x0, 0x0, 0x8
byte_808C428: .byte 0x3F, 0x0, 0x6, 0x2, 0xFF, 0x1E, 0x14, 0x0, 0x0, 0x0, 0x0, 0x27
	.byte 0xFF, 0xC, 0x8, 0x7, 0x3F, 0x34, 0x3E, 0x98, 0xBE, 0x7D, 0x8, 0x1C
	.byte 0x4, 0x1, 0x5F, 0xC4, 0x8, 0x8, 0x1C, 0x4, 0x2, 0x6A, 0xC4, 0x8
	.byte 0x8, 0x1C, 0x4, 0x3
	.word byte_808C475
	.byte 0x4A, 0x2, 0x18, 0x95, 0x6, 0x8, 0x15, 0x7B, 0xC4, 0x8, 0x8
	.byte 0x4A, 0x2, 0xD0, 0x95, 0x6, 0x8, 0x15, 0x7B, 0xC4, 0x8, 0x8
	.byte 0x4A, 0x2, 0xB8, 0x96, 0x6, 0x8, 0x15, 0x7B, 0xC4, 0x8, 0x8
byte_808C475: .byte 0x4A, 0x2, 0xC4, 0xB7, 0x6, 0x8, 0x2, 0xFF, 0x3C, 0x14, 0x0
	.byte 0x0, 0x0, 0x0, 0x2, 0xFF, 0x1E, 0x27, 0xFF, 0x8, 0x4, 0x7
	.byte 0x14
	.word byte_808C5D2
	.byte 0x2, 0xFF, 0x3C, 0x3A, 0xFF, 0x1, 0x4, 0x80, 0x2, 0xFF, 0x3C
	.byte 0x14, 0x0, 0x0, 0x0, 0x0, 0x27, 0xFF, 0xC, 0x4, 0x7, 0x36
	.byte 0xEC, 0xC5, 0x8, 0x8, 0x4A, 0x1, 0x20, 0x2, 0xFF, 0x1E, 0x39
	.byte 0x0, 0x5F, 0x58, 0xD, 0xC3, 0x4, 0x8, 0x29, 0xC3, 0x4, 0x8
	.byte 0x0, 0x0, 0x0, 0x0, 0x27, 0xFF, 0x8, 0x8, 0x7, 0x14, 0xD2
	.byte 0xC5, 0x8, 0x8, 0x50, 0x2, 0x1F, 0x2, 0xFF, 0x3C, 0x3A, 0xFF
	.byte 0x2, 0x4, 0x80, 0x2, 0xFF, 0x3C, 0x35, 0x8, 0x1, 0x9, 0x8
	.byte 0x2, 0x4B, 0xA5, 0xC6, 0x8, 0x8, 0x2, 0xFF, 0xA, 0x3A, 0xFF
	.byte 0x3, 0x4, 0x80, 0x2, 0xFF, 0xA, 0x14, 0x0, 0x0, 0x0, 0x0
	.byte 0x27, 0xFF, 0xC, 0x4, 0x7, 0x39, 0xF, 0x59, 0x38, 0x1C, 0x4
	.byte 0x1, 0x1C, 0xC5, 0x8, 0x8, 0x1C, 0x4, 0x2, 0x27, 0xC5, 0x8
	.byte 0x8, 0x1C, 0x4, 0x3, 0x32, 0xC5, 0x8, 0x8, 0x54, 0x0, 0x8
	.byte 0xC4, 0x8, 0x8, 0x15
	.word byte_808C538
	.byte 0x54, 0x0, 0x10, 0xC4, 0x8, 0x8, 0x15, 0x38, 0xC5, 0x8, 0x8
	.byte 0x54, 0x0, 0x18, 0xC4, 0x8, 0x8, 0x15, 0x38, 0xC5, 0x8, 0x8
	.byte 0x54, 0x0
	.word byte_808C420
byte_808C538: .byte 0x35, 0x8, 0x3, 0x2, 0xFF, 0x1E, 0x27, 0xFF, 0x8, 0x8, 0x7, 0x14
	.word byte_808C5D2
	.byte 0x4E, 0xFF, 0xFF, 0x2, 0xFF, 0x78, 0x35, 0x8, 0x4, 0x9, 0x8
	.byte 0x5, 0x2, 0xFF, 0x3C, 0x3A, 0xFF, 0x4, 0x4, 0x80, 0x2, 0xFF
	.byte 0x3C, 0x14, 0x0, 0x0, 0x0, 0x0, 0x27, 0xFF, 0xC, 0x8, 0x7
	.byte 0x2A, 0xFF, 0xD9, 0x9, 0x2A, 0xFF, 0xD8, 0x9, 0x2A, 0xFF, 0xD5
	.byte 0x9, 0x29, 0xFF, 0xD3, 0x9, 0x3F, 0x30, 0x3F, 0x18, 0x4A, 0x3
	.byte 0x4A, 0x1, 0x20, 0x4A, 0x4, 0x54, 0x1, 0x3B, 0x4B
	.word sub_808CA68+1
	.byte 0x2, 0xFF, 0x1E, 0x1C, 0x4, 0x1, 0xB0, 0xC5, 0x8, 0x8, 0x1C
	.byte 0x4, 0x2, 0xBC, 0xC5, 0x8, 0x8, 0x1C, 0x4, 0x3
	.word byte_808C5C8
	.byte 0x4C, 0x0, 0x0, 0x4, 0xC6, 0x8, 0x8, 0x15
	.word byte_808C5CF
	.byte 0x4C, 0x0, 0x0, 0x14, 0xC6, 0x8, 0x8, 0x15
	.word byte_808C5CF
	.byte 0x4C, 0x0, 0x0, 0x24, 0xC6, 0x8, 0x8, 0x15
	.word byte_808C5CF
byte_808C5C8: .byte 0x4C, 0x0, 0x0, 0x34, 0xC6, 0x8, 0x8
byte_808C5CF: .byte 0x3F, 0x4, 0x0
byte_808C5D2: .byte 0x3C, 0x0, 0x40, 0x39, 0xF, 0x59, 0x38, 0x50, 0x0, 0x1F
	.byte 0x4E, 0xFF, 0xFF, 0x4B
	.word byte_808C6A5
	.byte 0x15, 0x5F, 0xC5, 0x8, 0x8, 0x0, 0x0, 0x0, 0xC, 0x0, 0x0, 0x0, 0x60
	.byte 0x1B, 0x0, 0x3, 0xC, 0xF, 0xD, 0xFF, 0x10, 0x42, 0x0, 0x80, 0x1, 0x0
	.byte 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x82, 0x0, 0x0, 0x3, 0x0, 0x0, 0x30
	.byte 0xFE, 0x0, 0x0, 0x5E, 0x0, 0x0, 0x0, 0x0, 0x0, 0x82, 0x1, 0x0, 0x1
	.byte 0x0, 0x0, 0xCA, 0xFD, 0x0, 0x0, 0x46, 0x0, 0x0, 0x0, 0x0, 0x0, 0x82
	.byte 0x2, 0x0, 0x7, 0x0, 0x0, 0x2A, 0xFE, 0x0, 0x0, 0x28, 0x1, 0x0, 0x0
	.byte 0x0, 0x0, 0x85, 0x1, 0x0, 0x1, 0x0, 0x0, 0x5A, 0xFF, 0x0, 0x0, 0xF6
	.byte 0x1, 0x0, 0x0, 0x0, 0x0
	thumb_func_end sub_808C378

	thumb_local_start
sub_808C644:
	push {r4,r5,lr}
	mov r4, r10
	ldr r4, [r4,#oToolkit_GameStatePtr]
	ldrb r3, [r4,#oGameState_MapGroup]
	cmp r3, #0x85
	bne loc_808C654
	mov r4, #3
	b loc_808C656
loc_808C654:
	ldrb r4, [r4,#5]
loc_808C656:
	lsl r4, r4, #4
	ldr r5, off_808C680 // =byte_808C684
	ldrh r0, [r5,r4]
	lsl r0, r0, #0x10
	add r4, #2
	ldrh r1, [r5,r4]
	lsl r1, r1, #0x10
	mov r2, #0
	bl owPlayer_copyCoordsToNextCoordsWritePlayerCoordsThenIndirectlySetPlayerCoordsMaybe_809e188
	add r4, #2
	ldrh r0, [r5,r4]
	bl SetOWPlayerFacingDirection
	add r4, #2
	ldrh r0, [r5,r4]
	bl owPlayer_setS200ace0_fixedAnimationSelect_809e13c
	mov r0, #0
	pop {r4,r5,pc}
	.balign 4, 0
off_808C680: .word byte_808C684
byte_808C684: .byte 0x30, 0xFE, 0x5E, 0x0, 0x3, 0x0, 0x3, 0x0, 0xCA, 0xFD, 0x46
	.byte 0x0, 0x1, 0x0, 0x1, 0x0, 0x2A, 0xFE, 0x8, 0x1, 0x7, 0x0
	.byte 0x7, 0x0, 0x5A, 0xFF, 0xF6, 0x1, 0x1, 0x0, 0x1, 0x0, 0x20
byte_808C6A5: .byte 0xB5, 0x9, 0x20, 0xD5, 0x21, 0xA2, 0xF7, 0x5B, 0xFD
	.byte 0x15, 0xD1, 0xB, 0x4D, 0x6B, 0x20, 0x73, 0xF7, 0x8A
	.byte 0xFF, 0x0, 0x20, 0x74, 0xF7, 0xB, 0xFD, 0xEA, 0x88
	.byte 0x64, 0x23, 0x5A, 0x43, 0x90, 0x42, 0x1, 0xDC, 0x1
	.byte 0x21, 0x0, 0xE0, 0x81, 0x1A, 0x0, 0x20, 0x74, 0xF7
	.byte 0xC, 0xFD, 0x9, 0x20, 0xD5, 0x21, 0xA2, 0xF7, 0x1A
	.byte 0xFD, 0x0, 0x20, 0x20, 0xBD, 0x40, 0xB, 0x0, 0x2
	.byte 0x0, 0xC0, 0xED, 0x20, 0xE, 0x0, 0x0, 0x8
byte_808C6EC: .byte 0x0, 0xE0, 0x5, 0x20, 0xC, 0x0, 0x0, 0x8, 0x0, 0xE0, 0x19, 0x20
	.byte 0xF6, 0x0, 0x0, 0x8, 0x0, 0x40, 0xF7, 0xA0, 0xF8, 0x0, 0x0, 0x8
	.byte 0x0, 0x40, 0xB, 0xA0, 0xFC, 0x0, 0x0, 0x8
byte_808C70C: .byte 0x0, 0x40, 0x19, 0xA0, 0xFC, 0x0, 0x0, 0x8, 0x0, 0x40, 0x1, 0xA0
	.byte 0xC, 0x0, 0x0, 0x8, 0x0, 0x60, 0xE, 0xC0, 0x5, 0x0, 0x0, 0x8
	.byte 0x0, 0x60, 0xC, 0xE0, 0xF9, 0x0, 0x0, 0x8
byte_808C72C: .byte 0x0, 0x40, 0xFD, 0xA0, 0x12, 0x0, 0x0, 0x8, 0x0, 0x60, 0x1, 0x80
	.byte 0x0, 0x0, 0x0, 0x8, 0x0, 0x40, 0xF8, 0xA0, 0xF7, 0x0, 0x0, 0x8
	.byte 0x0, 0x60, 0x0, 0xA0, 0xE5, 0x0, 0x0, 0x8
byte_808C74C: .byte 0x3F, 0x0, 0x6, 0x2, 0xFF, 0x1, 0x3E, 0x98, 0xBE, 0x7D, 0x8
	.byte 0x1C, 0x4, 0x0, 0xB2, 0xC7, 0x8, 0x8, 0x1C, 0x4, 0x1, 0xCF
	.byte 0xC7, 0x8, 0x8, 0x1C, 0x4, 0x2
	.word byte_808C7EC
	.byte 0x1C, 0x4, 0x3, 0x9, 0xC8, 0x8, 0x8, 0x1C, 0x4, 0x4, 0x26, 0xC8
	.byte 0x8, 0x8, 0x1C, 0x4, 0x5, 0x43, 0xC8, 0x8, 0x8, 0x1C, 0x4, 0x6
	.word byte_808C860
	.byte 0x1C, 0x4, 0x7, 0x7D, 0xC8, 0x8, 0x8, 0x1C, 0x4, 0x8, 0x9A, 0xC8
	.byte 0x8, 0x8, 0x1C, 0x4, 0x9, 0xB7, 0xC8, 0x8, 0x8, 0x1C, 0x4, 0xA
	.word byte_808C8D4
	.byte 0x1C, 0x4, 0xB, 0xF1, 0xC8, 0x8, 0x8, 0x1C, 0x4, 0xC, 0xE
	.byte 0xC9, 0x8, 0x8, 0x2, 0xFF, 0xA, 0x54, 0x0, 0xE4, 0xC6, 0x8
	.byte 0x8, 0x2, 0xFF, 0xA, 0x3A, 0xFF, 0x6, 0x4, 0x80, 0x2A, 0xFF
	.byte 0xF6, 0x9, 0x2, 0xFF, 0x3C, 0x15, 0x26, 0xC9, 0x8, 0x8, 0x2
	.byte 0xFF, 0xA, 0x54, 0x0
	.word byte_808C6EC
	.byte 0x2, 0xFF, 0xA, 0x3A, 0xFF, 0x6, 0x4, 0x80, 0x2A, 0xFF, 0xF7
	.byte 0x9, 0x2, 0xFF, 0x3C, 0x15
	.word byte_808C926
byte_808C7EC: .byte 0x2, 0xFF, 0xA, 0x54, 0x0, 0xF4, 0xC6, 0x8, 0x8, 0x2, 0xFF, 0xA
	.byte 0x3A, 0xFF, 0x6, 0x4, 0x80, 0x2A, 0xFF, 0xF8, 0x9, 0x2, 0xFF, 0x3C
	.byte 0x15, 0x26, 0xC9, 0x8, 0x8, 0x2, 0xFF, 0xA, 0x54, 0x0, 0xFC, 0xC6
	.byte 0x8, 0x8, 0x2, 0xFF, 0xA, 0x3A, 0xFF, 0x6, 0x4, 0x80, 0x2A, 0xFF
	.byte 0xF9, 0x9, 0x2, 0xFF, 0x3C, 0x15, 0x26, 0xC9, 0x8, 0x8, 0x2, 0xFF
	.byte 0xA, 0x54, 0x0, 0x4, 0xC7, 0x8, 0x8, 0x2, 0xFF, 0xA, 0x3A, 0xFF
	.byte 0x6, 0x4, 0x80, 0x2A, 0xFF, 0xFA, 0x9, 0x2, 0xFF, 0x3C, 0x15, 0x26
	.byte 0xC9, 0x8, 0x8, 0x2, 0xFF, 0xA, 0x54, 0x0
	.word byte_808C70C
	.byte 0x2, 0xFF, 0xA, 0x3A, 0xFF, 0x6, 0x4, 0x80, 0x2A, 0xFF, 0xFB
	.byte 0x9, 0x2, 0xFF, 0x3C, 0x15
	.word byte_808C926
byte_808C860: .byte 0x2, 0xFF, 0xA, 0x54, 0x0, 0x14, 0xC7, 0x8, 0x8, 0x2, 0xFF, 0xA
	.byte 0x3A, 0xFF, 0x6, 0x4, 0x80, 0x2A, 0xFF, 0xFC, 0x9, 0x2, 0xFF, 0x3C
	.byte 0x15, 0x26, 0xC9, 0x8, 0x8, 0x2, 0xFF, 0xA, 0x54, 0x0, 0x1C, 0xC7
	.byte 0x8, 0x8, 0x2, 0xFF, 0xA, 0x3A, 0xFF, 0x6, 0x4, 0x80, 0x2A, 0xFF
	.byte 0xFD, 0x9, 0x2, 0xFF, 0x3C, 0x15, 0x26, 0xC9, 0x8, 0x8, 0x2, 0xFF
	.byte 0xA, 0x54, 0x0, 0x24, 0xC7, 0x8, 0x8, 0x2, 0xFF, 0xA, 0x3A, 0xFF
	.byte 0x6, 0x4, 0x80, 0x2A, 0xFF, 0xFE, 0x9, 0x2, 0xFF, 0x3C, 0x15, 0x26
	.byte 0xC9, 0x8, 0x8, 0x2, 0xFF, 0xA, 0x54, 0x0
	.word byte_808C72C
	.byte 0x2, 0xFF, 0xA, 0x3A, 0xFF, 0x6, 0x4, 0x80, 0x2A, 0xFF, 0xFA
	.byte 0xF, 0x2, 0xFF, 0x3C, 0x15
	.word byte_808C926
byte_808C8D4: .byte 0x2, 0xFF, 0xA, 0x54, 0x0, 0x34, 0xC7, 0x8, 0x8, 0x2, 0xFF, 0xA
	.byte 0x3A, 0xFF, 0x6, 0x4, 0x80, 0x2A, 0xFF, 0xFB, 0xF, 0x2, 0xFF, 0x3C
	.byte 0x15, 0x26, 0xC9, 0x8, 0x8, 0x2, 0xFF, 0xA, 0x54, 0x0, 0x3C, 0xC7
	.byte 0x8, 0x8, 0x2, 0xFF, 0xA, 0x3A, 0xFF, 0x6, 0x4, 0x80, 0x2A, 0xFF
	.byte 0xFC, 0xF, 0x2, 0xFF, 0x3C, 0x15, 0x26, 0xC9, 0x8, 0x8, 0x2, 0xFF
	.byte 0xA, 0x54, 0x0, 0x44, 0xC7, 0x8, 0x8, 0x2, 0xFF, 0xA, 0x3A, 0xFF
	.byte 0x6, 0x4, 0x80, 0x2A, 0xFF, 0xFD, 0xF, 0x2, 0xFF, 0x3C
byte_808C926: .byte 0x54, 0x1, 0x3B, 0x3F, 0x4, 0x2, 0xFF, 0x1E, 0x0, 0x0
byte_808C930: .byte 0x3F, 0x0, 0x6, 0x53, 0xFF, 0x0, 0x4B, 0x49, 0xC9, 0x8, 0x8
	.byte 0x2A, 0xFF, 0xD4, 0x9, 0x54, 0x1, 0x53, 0xFF, 0x1, 0x3F, 0x4
	.byte 0x0, 0x0, 0xF0, 0xB5, 0x40, 0x46, 0x1, 0xB4, 0x30, 0x4D, 0x6C
	.byte 0x78, 0x0, 0x2C, 0x7, 0xDC, 0x0, 0x20, 0xA3, 0xF7, 0x2B, 0xFC
	.byte 0x1, 0x20, 0xFC, 0xF7, 0x71, 0xFC, 0x1, 0x34, 0x6C, 0x70, 0x54
	.byte 0x46, 0x64, 0x68, 0x24, 0x88, 0x20, 0x21, 0x9, 0x1, 0x21, 0x42
	.byte 0xC, 0xD0, 0x0, 0x24, 0x6C, 0x70, 0x9, 0x20, 0xD4, 0x21, 0xA2
	.byte 0xF7, 0xD6, 0xFB, 0x83, 0x20, 0x73, 0xF7, 0x23, 0xFE, 0x0, 0x20
	.byte 0x2, 0xBC, 0x88, 0x46, 0xF0, 0xBD, 0xA3, 0xF7, 0x1F, 0xFC, 0x7
	.byte 0x1C, 0x88, 0x46, 0x1F, 0x4B, 0x0, 0x20, 0x1A, 0x5C, 0x11, 0x1C
	.byte 0x21, 0x40, 0x91, 0x42, 0x3, 0xD0, 0x1, 0x30, 0x8, 0x28, 0xF7
	.byte 0xDB, 0x12, 0xE0, 0x0, 0x26, 0x2, 0x21, 0xC, 0x42, 0x0, 0xD0
	.byte 0x10, 0x26, 0x4, 0x1C, 0x19, 0x4B, 0x60, 0x0, 0x1B, 0x18, 0x9B
	.byte 0x19, 0x0, 0x20, 0x18, 0x56, 0x0, 0x4, 0x1, 0x21, 0x59, 0x56
	.byte 0x9, 0x4, 0xC0, 0x19, 0x41, 0x44, 0x1, 0xE0, 0x38, 0x1C, 0x41
	.byte 0x46, 0x83, 0xB0, 0x0, 0x90, 0x1, 0x91, 0x0, 0x22, 0x2, 0x92
	.byte 0x68, 0x46, 0xA3, 0xF7, 0xB, 0xFD, 0x0, 0x28, 0x6, 0xD0, 0x20
	.byte 0x1C, 0xFC, 0xF7, 0xC0, 0xFC, 0x38, 0x1C, 0x41, 0x46, 0x0, 0x22
	.byte 0x2, 0xE0, 0x0, 0x98, 0x1, 0x99, 0x2, 0x9A, 0xA3, 0xF7, 0xED
	.byte 0xFB, 0xFC, 0xF7, 0x3D, 0xFC, 0x1, 0x20, 0x3, 0xB0, 0x2, 0xBC
	.byte 0x88, 0x46, 0xF0, 0xBD, 0x40, 0xB, 0x0, 0x2
	.word byte_808CA18
byte_808CA18: .byte 0x50, 0x90, 0xA0, 0x60, 0x40, 0x10, 0x80, 0x20
	.word byte_808CA24
byte_808CA24: .byte 0x4, 0x0, 0x0, 0x4, 0xFC, 0x0, 0x0, 0xFC, 0x4, 0xFC, 0x2, 0x2, 0xFC
	.byte 0x4, 0xFE, 0xFE, 0x8, 0x0, 0x0, 0x8, 0xF8, 0x0, 0x0, 0xF8, 0x8, 0xF8
	.byte 0x4, 0x4, 0xF8, 0x8, 0xFC, 0xFC
dword_808CA44: .word 0x2000B40
byte_808CA48: .byte 0x3F, 0x0, 0x6, 0x29, 0xFF, 0x31, 0x17, 0x3E, 0x98, 0xBE
	.byte 0x7D, 0x8, 0x3A, 0xFF, 0x0, 0x4, 0x80, 0x29, 0xFF, 0xD8
	.byte 0x9, 0x4B, 0xD9, 0xCB, 0x8, 0x8, 0x3F, 0x4, 0x0, 0x0
	.byte 0x0, 0x0
	thumb_func_end sub_808C644

	thumb_local_start
sub_808CA68:
	push {r5,lr}
	ldr r0, off_808CB9C // =dword_808CA44
	ldr r0, [r0]
	mov r5, r0
	mov r1, #0x98
	bl ZeroFillByWord // (void *memBlock, int size) -> void
	mov r0, #0x20 
	strb r0, [r5,#0x3] // (byte_2000B43 - 0x2000b40)
	bl sub_808CC84
	movflag EVENT_9D8
	bl ClearEventFlagFromImmediate
	movflag EVENT_9D9
	bl ClearEventFlagFromImmediate
	mov r0, #0
	bl sub_8001172
	movflag EVENT_9D3
	bl TestEventFlagFromImmediate // (u8 eventGroupOffset, u8 byteAndFlagOffset) -> !zf
	bne loc_808CAA2
	bl sub_808CF50
loc_808CAA2:
	movflag EVENT_9D3
	bl ClearEventFlagFromImmediate
	bl sub_8142C94
	bl sub_808CBA0
	bl sub_808CF34
	cmp r0, #1
	beq loc_808CABE
	bl sub_808CE70
loc_808CABE:
	bl sub_808CE28
	mov r0, #0x1f
	ldr r1, dword_808CAD0 // =0x100
	bl sound_8000672
	mov r0, #0
	pop {r5,pc}
	.balign 4, 0
dword_808CAD0: .word 0x100
	thumb_func_end sub_808CA68

	thumb_local_start
sub_808CAD4:
	push {r5,lr}
	bl sub_8142C94
	movflag EVENT_9D6
	bl SetEventFlagFromImmediate
	bl sub_808CBA0
	movflag EVENT_9D8
	bl TestEventFlagFromImmediate // (u8 eventGroupOffset, u8 byteAndFlagOffset) -> !zf
	beq loc_808CB06
	movflag EVENT_9D7
	bl SetEventFlagFromImmediate
	bl sub_808CBD8
	bl reqBBS_setFlag_e17b0f7_8140A00
	mov r0, #3
	bl sub_8001172
loc_808CB06:
	mov r0, #0
	pop {r5,pc}
	.balign 4, 0x00
	thumb_func_end sub_808CAD4

	thumb_func_start sub_808CB0C
sub_808CB0C:
	push {r4-r7,lr}
	ldr r5, off_808CB9C // =dword_808CA44
	ldr r5, [r5]
	movflag EVENT_9D6
	bl TestEventFlagFromImmediate // (u8 eventGroupOffset, u8 byteAndFlagOffset) -> !zf
	beq loc_808CB3C
	bl sub_808D11C
	movflag EVENT_9D8
	bl TestEventFlagFromImmediate // (u8 eventGroupOffset, u8 byteAndFlagOffset) -> !zf
	beq locret_808CB96
	mov r0, r10
	ldr r0, [r0,#oToolkit_GameStatePtr]
	ldrb r1, [r0,#oGameState_MapGroup]
	cmp r1, #0x85
	beq loc_808CB3C
	mov r0, #0x1f
	ldr r1, dword_808CB98 // =0x13b 
	bl sound_8000672
loc_808CB3C:
	mov r0, #1
	bl TestPETMenuDataFlag
	bne locret_808CB96
	ldrb r0, [r5,#0xc] // (byte_2000B4C - 0x2000b40)
	cmp r0, #0
	bne loc_808CB5A
	bl ReadOWPlayerObjectCoords
	asr r0, r0, #0x10
	asr r1, r1, #0x10
	strh r0, [r5,#0x1a] // (word_2000B5A - 0x2000b40)
	strh r1, [r5,#0x1c] // (word_2000B5C - 0x2000b40)
	mov r0, #0x20 
	strb r0, [r5,#0x3] // (byte_2000B43 - 0x2000b40)
loc_808CB5A:
	ldrb r0, [r5,#0x3] // (byte_2000B43 - 0x2000b40)
	sub r0, #1
	strb r0, [r5,#0x3] // (byte_2000B43 - 0x2000b40)
	bne loc_808CB6A
	bl sub_808CCAC
	mov r0, #0x20 
	strb r0, [r5,#0x3] // (byte_2000B43 - 0x2000b40)
loc_808CB6A:
	bl sub_808CD04
	beq loc_808CB76
	bl sub_808CD24
	b loc_808CB8A
loc_808CB76:
	movflag EVENT_BF1
	bl ClearEventFlagFromImmediate
	bl sub_808CFB8
	cmp r0, #1
	bne loc_808CB8A
	bl sub_808D108
loc_808CB8A:
	bl sub_808CC34
	cmp r0, #0
	beq locret_808CB96
	bl StartCutscene
locret_808CB96:
	pop {r4-r7,pc}
	.balign 4, 0
dword_808CB98: .word 0x13B
off_808CB9C: .word dword_808CA44
	thumb_func_end sub_808CB0C

	thumb_local_start
sub_808CBA0:
	push {r4-r7,lr}
	mov r6, #0
	mov r7, #7
	mov r0, r10
	ldr r0, [r0,#oToolkit_GameStatePtr]
	ldrb r1, [r0,#oGameState_MapGroup]
	cmp r1, #0x85
	bne loc_808CBB4
	mov r7, #0xc
	b loc_808CBBC
loc_808CBB4:
	ldrb r0, [r0,#oGameState_MapNumber]
	cmp r0, #0
	beq loc_808CBBC
	mov r7, #9
loc_808CBBC:
	push {r5}
	mov r0, #0x10
	mov r1, #0
	mov r2, #0
	mov r3, #0
	mov r4, r6
	bl SpawnOverworldMapObject
	pop {r5}
	add r6, #1
	cmp r6, r7
	blt loc_808CBBC
	pop {r4-r7,pc}
	.balign 4, 0x00
	thumb_func_end sub_808CBA0

	thumb_local_start
sub_808CBD8:
	push {r4-r7,lr}
	push {r5}
	mov r0, #0x11
	mov r1, #0
	mov r2, #0
	mov r3, #0
	bl SpawnOverworldMapObject
	pop {r5}
	bl reqBBS_setFlag_e17b0f7_8140A00
	mov r0, #3
	bl sub_8001172
	mov r0, r10
	ldr r0, [r0,#oToolkit_GameStatePtr]
	ldrb r1, [r0,#oGameState_MapGroup]
	cmp r1, #0x85
	beq loc_808CC06
	mov r0, #0x1f
	ldr r1, dword_808CC0C // =0x13b 
	bl sound_8000672
loc_808CC06:
	mov r0, #0
	pop {r4-r7,pc}
	.balign 4, 0
dword_808CC0C: .word 0x13B
	thumb_func_end sub_808CBD8

	thumb_local_start
sub_808CC10:
	push {r4-r7,lr}
	mov r4, #0
	ldrb r0, [r5,#4]
	cmp r0, #2
	bne loc_808CC2E
	movflag EVENT_9D8
	bl TestEventFlagFromImmediate // (u8 eventGroupOffset, u8 byteAndFlagOffset) -> !zf
	bne loc_808CC2E
	movflag EVENT_9D8
	bl SetEventFlagFromImmediate
	mov r4, #1
loc_808CC2E:
	tst r4, r4
	pop {r4-r7,pc}
	.balign 4, 0x00
	thumb_func_end sub_808CC10

	thumb_local_start
sub_808CC34:
	push {r4,r6,lr}
	mov r4, #0
	mov r6, #0
	movflag EVENT_9D4
	bl TestEventFlagFromImmediate // (u8 eventGroupOffset, u8 byteAndFlagOffset) -> !zf
	beq loc_808CC48
	ldr r4, off_808CC80 // =byte_808C930
	b loc_808CC6C
loc_808CC48:
	bl sub_808CC10
	beq loc_808CC52
	ldr r4, off_808CC74 // =byte_808CA48
	b loc_808CC6C
loc_808CC52:
	bl sub_808CF8C
	beq loc_808CC62
	ldr r4, off_808CC7C // =byte_808C428
	bl sub_808D084
	mov r6, r0
	b loc_808CC6C
loc_808CC62:
	bl sub_808CDC4
	beq loc_808CC6C
	ldr r4, off_808CC78 // =byte_808C74C
	mov r6, r1
loc_808CC6C:
	mov r0, r4
	mov r1, r6
	pop {r4,r6,pc}
	.balign 4, 0
off_808CC74: .word byte_808CA48
off_808CC78: .word byte_808C74C
off_808CC7C: .word byte_808C428
off_808CC80: .word byte_808C930
	thumb_func_end sub_808CC34

	thumb_local_start
sub_808CC84:
	push {lr}
	bl ReadOWPlayerObjectCoords
	asr r0, r0, #0x10
	asr r1, r1, #0x10
	strh r0, [r5,#0x16]
	strh r1, [r5,#0x18]
	strh r0, [r5,#0x1a]
	strh r1, [r5,#0x1c]
	pop {pc}
	thumb_func_end sub_808CC84

	thumb_local_start
sub_808CC98:
	push {lr}
	bl ReadOWPlayerObjectCoords
	asr r0, r0, #0x10
	asr r1, r1, #0x10
	strh r0, [r5,#0x1a]
	strh r1, [r5,#0x1c]
	strh r0, [r5,#0x16]
	strh r1, [r5,#0x18]
	pop {pc}
	thumb_func_end sub_808CC98

	thumb_local_start
sub_808CCAC:
	push {r4-r7,lr}
	bl GetOWPlayerFacingDirection
	mov r4, r0
	bl ReadOWPlayerObjectCoords
	asr r0, r0, #0x10
	asr r1, r1, #0x10
	cmp r4, #0
	bne loc_808CCC6
	add r0, #0x18
	sub r1, #0x18
	b loc_808CCFC
loc_808CCC6:
	cmp r4, #1
	bne loc_808CCCE
	add r0, #0x18
	b loc_808CCFC
loc_808CCCE:
	cmp r4, #2
	bne loc_808CCD8
	add r0, #0x18
	add r1, #0x18
	b loc_808CCFC
loc_808CCD8:
	cmp r4, #3
	bne loc_808CCE0
	add r1, #0x18
	b loc_808CCFC
loc_808CCE0:
	cmp r4, #4
	bne loc_808CCEA
	sub r0, #0x18
	add r1, #0x18
	b loc_808CCFC
loc_808CCEA:
	cmp r4, #5
	bne loc_808CCF0
	sub r0, #0x18
loc_808CCF0:
	cmp r4, #6
	bne loc_808CCFA
	sub r0, #0x18
	sub r1, #0x18
	b loc_808CCFC
loc_808CCFA:
	sub r1, #0x18
loc_808CCFC:
	strh r0, [r5,#0x1a]
	strh r1, [r5,#0x1c]
	pop {r4-r7,pc}
	.balign 4, 0x00
	thumb_func_end sub_808CCAC

	thumb_local_start
sub_808CD04:
	push {r4-r7,lr}
	ldr r5, off_808D030 // =dword_808CA44
	ldr r5, [r5]
	mov r4, #0
	bl reqBBS_81409E4
	cmp r0, #0xc0
	blt loc_808CD1C
	cmp r0, #0xcc
	bgt loc_808CD1C
	strb r0, [r5,#0x5] // (byte_2000B45 - 0x2000b40)
	mov r4, #1
loc_808CD1C:
	mov r0, r4
	tst r0, r0
	pop {r4-r7,pc}
	.balign 4, 0x00
	thumb_func_end sub_808CD04

	thumb_local_start
sub_808CD24:
	push {r4-r7,lr}
	ldr r5, off_808D030 // =dword_808CA44
	ldr r5, [r5]
	bl sub_808D084
	lsl r0, r0, #2
	ldr r4, off_808CD64 // =off_808CD68 
	ldr r4, [r4,r0]
	ldrb r0, [r5,#0x5] // (byte_2000B45 - 0x2000b40)
	sub r0, #0xc0
	lsl r0, r0, #1
	ldrh r4, [r4,r0]
	mov r0, r4
	bl TestEventFlag // (u16 flag) -> !zf
	bne locret_808CD62
	// bitfield
	mov r0, r4
	bl SetEventFlag
	movflag EVENT_BF1
	bl TestEventFlagFromImmediate // (u8 eventGroupOffset, u8 byteAndFlagOffset) -> !zf
	bne locret_808CD62
	mov r0, #0xd4
	bl PlaySoundEffect
	movflag EVENT_BF1
	bl SetEventFlagFromImmediate
locret_808CD62:
	pop {r4-r7,pc}
	.balign 4, 0
off_808CD64: .word off_808CD68
off_808CD68: .word byte_808CD78
	.word byte_808CD86
	.word byte_808CD98
	.word byte_808CDAA
byte_808CD78: .byte 0xDD, 0x9, 0xDE, 0x9, 0xDF, 0x9, 0xE0, 0x9, 0xE1, 0x9, 0xE2
	.byte 0x9, 0xE3, 0x9
byte_808CD86: .byte 0xE4, 0x9, 0xE5, 0x9, 0xE6, 0x9, 0xE7, 0x9, 0xE8, 0x9, 0xE9
	.byte 0x9, 0xEA, 0x9, 0xEB, 0x9, 0xEC, 0x9
byte_808CD98: .byte 0xED, 0x9, 0xEE, 0x9, 0xEF, 0x9, 0xF0, 0x9, 0xF1, 0x9, 0xF2
	.byte 0x9, 0xF3, 0x9, 0xF4, 0x9, 0xF5, 0x9
byte_808CDAA: .byte 0xC6, 0xF, 0xC7, 0xF, 0xC8, 0xF, 0xC9, 0xF, 0xCA, 0xF
	.byte 0xCB, 0xF, 0xCC, 0xF, 0xCD, 0xF, 0xCE, 0xF, 0xCF, 0xF
	.byte 0xD0, 0xF, 0xD1, 0xF, 0x0, 0x0
	thumb_func_end sub_808CD24

	thumb_local_start
sub_808CDC4:
	push {r4-r7,lr}
	mov r0, r8
	push {r0}
	mov r4, #0
	bl sub_808D084
	mov r8, r0
	lsl r0, r0, #2
	ldr r6, off_808CEB8 // =off_808CEBC 
	ldr r6, [r6,r0]
	mov r7, #0
loc_808CDDA:
	mov r3, r7
	lsl r3, r3, #3
	ldrh r0, [r6,r3]
	mov r0, r0
	bl TestEventFlag // (u16 flag) -> !zf
	beq loc_808CE02
	mov r3, r7
	lsl r3, r3, #3
	add r3, #2
	ldrh r0, [r6,r3]
	add r3, #2
	ldrh r1, [r6,r3]
	mov r0, r0
	mov r2, r1
	bl TestEventFlagRange // (int a3, int a2) ->
	beq loc_808CE02
	mov r4, #1
	b loc_808CE14
loc_808CE02:
	add r7, #1
	mov r2, #3
	cmp r8, r2
	blt loc_808CE0E
	cmp r7, #4
	b loc_808CE10
loc_808CE0E:
	cmp r7, #3
loc_808CE10:
	blt loc_808CDDA
	mov r7, #0
loc_808CE14:
	mov r0, r4
	mov r1, r8
	mov r2, #3
	mul r1, r2
	add r1, r1, r7
	tst r0, r0
	pop {r2}
	mov r8, r2
	pop {r4-r7,pc}
	.balign 4, 0x00
	thumb_func_end sub_808CDC4

	thumb_local_start
sub_808CE28:
	push {r4-r7,lr}
	mov r0, r8
	push {r0}
	bl sub_808D084
	mov r8, r0
	lsl r0, r0, #2
	ldr r4, off_808CEB8 // =off_808CEBC 
	ldr r4, [r4,r0]
	mov r7, #0
loc_808CE3C:
	mov r6, r7
	lsl r6, r6, #3
	ldrh r0, [r4,r6]
	mov r0, r0
	bl TestEventFlag // (u16 flag) -> !zf
	beq loc_808CE5A
	add r6, #2
	ldrh r0, [r4,r6]
	add r6, #2
	ldrh r1, [r4,r6]
	mov r0, r0
	mov r2, r1
	bl ClearEventFlagRange // (u16 entryFlagBitfield) -> void
loc_808CE5A:
	add r7, #1
	mov r2, #3
	cmp r8, r2
	blt loc_808CE66
	cmp r7, #4
	b loc_808CE68
loc_808CE66:
	cmp r7, #3
loc_808CE68:
	blt loc_808CE3C
	pop {r0}
	mov r8, r0
	pop {r4-r7,pc}
	thumb_func_end sub_808CE28

	thumb_local_start
sub_808CE70:
	push {r4-r7,lr}
	mov r0, r8
	push {r0}
	bl sub_808D084
	mov r8, r0
	lsl r0, r0, #2
	ldr r4, off_808CEB8 // =off_808CEBC 
	ldr r4, [r4,r0]
	mov r7, #0
loc_808CE84:
	mov r6, r7
	lsl r6, r6, #3
	ldrh r0, [r4,r6]
	mov r0, r0
	bl SetEventFlag
	add r6, #2
	ldrh r0, [r4,r6]
	add r6, #2
	ldrh r1, [r4,r6]
	mov r0, r0
	mov r2, r1
	bl ClearEventFlagRange // (u16 entryFlagBitfield) -> void
	add r7, #1
	mov r2, #3
	cmp r8, r2
	blt loc_808CEAC
	cmp r7, #4
	b loc_808CEAE
loc_808CEAC:
	cmp r7, #3
loc_808CEAE:
	blt loc_808CE84
	pop {r0}
	mov r8, r0
	pop {r4-r7,pc}
	.balign 4, 0
off_808CEB8: .word off_808CEBC
off_808CEBC: .word byte_808CECC
	.word byte_808CEE4
	.word byte_808CEFC
	.word byte_808CF14
byte_808CECC: .byte 0xF6, 0x9, 0xDD, 0x9, 0x2, 0x0, 0x0, 0x0, 0xF7, 0x9, 0xDF, 0x9, 0x2
	.byte 0x0, 0x0, 0x0, 0xF8, 0x9, 0xE1, 0x9, 0x3, 0x0, 0x0, 0x0
byte_808CEE4: .byte 0xF9, 0x9, 0xE4, 0x9, 0x3, 0x0, 0x0, 0x0, 0xFA, 0x9, 0xE7, 0x9, 0x3
	.byte 0x0, 0x0, 0x0, 0xFB, 0x9, 0xEA, 0x9, 0x3, 0x0, 0x0, 0x0
byte_808CEFC: .byte 0xFC, 0x9, 0xED, 0x9, 0x3, 0x0, 0x0, 0x0, 0xFD, 0x9, 0xF0, 0x9, 0x3
	.byte 0x0, 0x0, 0x0, 0xFE, 0x9, 0xF3, 0x9, 0x3, 0x0, 0x0, 0x0
byte_808CF14: .byte 0xFA, 0xF, 0xC6, 0xF, 0x3, 0x0, 0x0, 0x0, 0xFB, 0xF, 0xC9
	.byte 0xF, 0x3, 0x0, 0x0, 0x0, 0xFC, 0xF, 0xCC, 0xF, 0x3, 0x0
	.byte 0x0, 0x0, 0xFD, 0xF, 0xCF, 0xF, 0x3, 0x0, 0x0, 0x0
	thumb_func_end sub_808CE70

	thumb_local_start
sub_808CF34:
	push {r4-r7,lr}
	mov r4, #0
	bl sub_808D084
	lsl r0, r0, #1
	ldr r1, off_808CF78 // =byte_808CF84 
	ldrh r1, [r1,r0]
	mov r0, r1
	bl TestEventFlag // (u16 flag) -> !zf
	beq loc_808CF4C
	mov r4, #1
loc_808CF4C:
	mov r0, r4
	pop {r4-r7,pc}
	thumb_func_end sub_808CF34

	thumb_local_start
sub_808CF50:
	push {r4-r7,lr}
	bl sub_808D084
	lsl r0, r0, #1
	mov r4, r0
	ldr r1, off_808CF74 // =byte_808CF7C 
	ldrh r1, [r1,r4]
	mov r0, r1
	bl TestEventFlag // (u16 flag) -> !zf
	bne locret_808CF70
	ldr r1, off_808CF78 // =byte_808CF84 
	ldrh r1, [r1,r4]
	// bitfield
	mov r0, r1
	bl SetEventFlag
locret_808CF70:
	pop {r4-r7,pc}
	.balign 4, 0
off_808CF74: .word byte_808CF7C
off_808CF78: .word byte_808CF84
byte_808CF7C: .byte 0xF8, 0x9, 0xFB, 0x9, 0xFE, 0x9, 0xFD, 0xF
byte_808CF84: .byte 0xDA, 0x9, 0xDB, 0x9, 0xDC, 0x9, 0xC5, 0xF
	thumb_func_end sub_808CF50

	thumb_local_start
sub_808CF8C:
	push {r4,lr}
	mov r4, #0
	movflag EVENT_9D9
	bl TestEventFlagFromImmediate // (u8 eventGroupOffset, u8 byteAndFlagOffset) -> !zf
	beq loc_808CFAC
	mov r1, r10
	ldr r1, [r1,#oToolkit_ChatboxPtr]
	mov r2, #0x4c 
	ldrh r0, [r5,#6]
	str r0, [r1,r2]
	ldr r0, dword_808CFB4 // =0x122 
	bl PlaySoundEffect
	mov r4, #1
loc_808CFAC:
	mov r0, r4
	tst r0, r0
	pop {r4,pc}
	.balign 4, 0
dword_808CFB4: .word 0x122
	thumb_func_end sub_808CF8C

	thumb_local_start
sub_808CFB8:
	push {r4-r7,lr}
	ldr r5, off_808D030 // =dword_808CA44
	ldr r5, [r5]
	mov r4, #0
	bl ReadOWPlayerObjectCoords
	bl sub_808D034
	strh r2, [r5,#0x12] // (word_2000B52 - 0x2000b40)
	ldrh r3, [r5,#0x14] // (word_2000B54 - 0x2000b40)
	cmp r2, r3
	beq loc_808D020
	strh r2, [r5,#0x14] // (word_2000B54 - 0x2000b40)
	bl sub_808D098
	bne loc_808CFDA
	b loc_808D020
loc_808CFDA:
	mov r4, #1
	ldrb r0, [r5,#0x8] // (byte_2000B48 - 0x2000b40)
	ldrb r1, [r5,#0x9] // (byte_2000B49 - 0x2000b40)
	cmp r1, #0x71 
	blt loc_808D020
	cmp r1, #0x90
	bgt loc_808D020
	sub r0, #0x72 
	sub r1, #0x71 
	lsl r0, r0, #2
	mov r2, #0x20 
	add r2, r2, r0
	ldr r0, [r5,r2]
	mov r3, #1
	lsl r3, r1
	mov r1, r0
	and r1, r3
	beq loc_808D01C
	ldrh r0, [r5,#0x6] // (word_2000B46 - 0x2000b40)
	add r0, #1
	ldr r1, dword_808D02C // =0xffff 
	cmp r0, r1
	blt loc_808D00A
	mov r0, r1
loc_808D00A:
	strh r0, [r5,#0x6] // (word_2000B46 - 0x2000b40)
	ldr r0, dword_808D028 // =0x11b 
	bl PlaySoundEffect
	mov r0, #SOUND_CANT_JACK_IN
	bl PlaySoundEffect
	mov r4, #2
	b loc_808D020
loc_808D01C:
	orr r0, r3
	str r0, [r5,r2]
loc_808D020:
	strb r4, [r5,#0x4] // (byte_2000B44 - 0x2000b40)
	mov r0, r4
	pop {r4-r7,pc}
	.balign 4, 0
dword_808D028: .word 0x11B
dword_808D02C: .word 0xFFFF
off_808D030: .word dword_808CA44
	thumb_func_end sub_808CFB8

	thumb_local_start
sub_808D034:
	push {r4,r5,lr}
	push {r0,r1}
	bl sub_808D060
	pop {r3,r4}
	asr r3, r3, #0x10
	asr r4, r4, #0x10
	add r0, r0, r3
	add r1, r1, r4
	asr r0, r0, #5
	asr r1, r1, #5
	add r0, #0x80
	add r1, #0x80
	strb r0, [r5,#8]
	strb r1, [r5,#9]
	mov r2, r0
	mov r3, r1
	mov r4, #0x80
	lsl r4, r4, #1
	mul r2, r4
	add r2, r2, r3
	pop {r4,r5,pc}
	thumb_func_end sub_808D034

	thumb_local_start
sub_808D060:
	push {lr}
	bl sub_808D084
	ldr r3, off_808D078 // =byte_808D07C
	lsl r0, r0, #1
	add r3, r3, r0
	mov r0, #0
	ldrsb r0, [r3,r0]
	mov r1, #1
	ldrsb r1, [r3,r1]
	pop {pc}
	.balign 4, 0
off_808D078: .word byte_808D07C
byte_808D07C: .byte 0x4, 0xE, 0xC, 0x4, 0xA, 0x4, 0xFC, 0xF6
	thumb_func_end sub_808D060

	thumb_local_start
sub_808D084:
	push {lr}
	mov r0, r10
	ldr r0, [r0,#oToolkit_GameStatePtr]
	ldrb r1, [r0,#oGameState_MapGroup]
	cmp r1, #0x85
	bne loc_808D094
	mov r0, #3
	b locret_808D096
loc_808D094:
	ldrb r0, [r0,#5]
locret_808D096:
	pop {pc}
	thumb_func_end sub_808D084

	thumb_local_start
sub_808D098:
	push {r4-r7,lr}
	push {r0,r1}
	mov r6, #0
	bl sub_808D084
	cmp r0, #3
	beq loc_808D0D8
	mov r4, r0
	lsl r4, r4, #1
	ldr r7, off_808D0F8 // =byte_808D0FC
	ldrb r3, [r7,r4]
	pop {r0,r1}
	cmp r0, r3
	blt loc_808D0C2
	mov r2, r4
	add r2, #1
	ldrb r3, [r7,r2]
	cmp r0, r3
	bgt loc_808D0F2
	mov r6, #1
	b loc_808D0F2
loc_808D0C2:
	cmp r4, #2
	bne loc_808D0F2
	mov r6, #0
	ldrb r3, [r7,#0x8] // (byte_808D104 - 0x808d0fc)
	cmp r0, r3
	blt loc_808D0F2
	ldrb r3, [r7,#0x9] // (byte_808D105 - 0x808d0fc)
	cmp r1, r3
	blt loc_808D0F2
	mov r6, #1
	b loc_808D0F2
loc_808D0D8:
	mov r4, r0
	lsl r4, r4, #1
	ldr r7, off_808D0F8 // =byte_808D0FC
	ldrb r3, [r7,r4]
	pop {r0,r1}
	cmp r1, r3
	bgt loc_808D0F2
	mov r2, r4
	add r2, #1
	ldrb r3, [r7,r2]
	cmp r1, r3
	blt loc_808D0F2
	mov r6, #1
loc_808D0F2:
	mov r0, r6
	tst r0, r0
	pop {r4-r7,pc}
	.balign 4, 0
off_808D0F8: .word byte_808D0FC
byte_808D0FC: .byte 0x73, 0x8D, 0x74, 0x8F, 0x73, 0x8A, 0x8D, 0x72
byte_808D104: .byte 0x72
byte_808D105: .byte 0x84, 0x0, 0x0
	thumb_func_end sub_808D098

	thumb_local_start
sub_808D108:
	push {r4-r6,lr}
	bl sub_8142CB0
	mov r1, #0
	bl sub_8142CC8
	bl sub_8142D4C
	pop {r4-r6,pc}
	.balign 4, 0x00
	thumb_func_end sub_808D108

	thumb_local_start
sub_808D11C:
	push {r4-r7,lr}
	ldr r5, off_808D16C // =dword_808CA44
	ldr r5, [r5]
	mov r6, #0
	mov r7, #0
loc_808D126:
	mov r3, #0x20 
	mov r2, r6
	lsl r2, r2, #2
	add r3, r3, r2
	ldr r0, [r5,r3]
	mov r1, #1
	lsl r1, r7
	and r0, r1
	beq loc_808D152
	mov r0, r6
	add r0, #0x72 
	strb r0, [r5,#0x8] // (byte_2000B48 - 0x2000b40)
	mov r0, r7
	add r0, #0x71 
	strb r0, [r5,#0x9] // (byte_2000B49 - 0x2000b40)
	bl sub_8142CB0
	mov r1, #0
	bl sub_8142CC8
	bl sub_8142D4C
loc_808D152:
	add r7, #1
	cmp r7, #0x1f
	blt loc_808D126
	mov r7, #0
	add r6, #1
	cmp r6, #0x1e
	blt loc_808D126
	movflag EVENT_9D6
	bl ClearEventFlagFromImmediate
	pop {r4-r7,pc}
	.balign 4, 0
off_808D16C: .word dword_808CA44
	.byte 0x50, 0xAC, 0x58, 0x0, 0x2, 0x8, 0x4, 0x38, 0x0, 0x0, 0x0, 0x80
	.byte 0xFF, 0x0, 0x0, 0x8, 0x3F, 0x0, 0x6, 0x3E, 0x44, 0xCA, 0x7B, 0x88
	.byte 0x2, 0xFF, 0x1, 0x53, 0xFF, 0x0, 0x54, 0x0, 0x70, 0xD1, 0x8, 0x8
	.byte 0x4A, 0x2, 0x1C, 0x40, 0x6, 0x8, 0x3F, 0x34, 0x3F, 0x1C, 0x14, 0x31
	.byte 0xD2, 0x8, 0x8, 0x2, 0xFF, 0x5A, 0x3A, 0xFF, 0x0, 0x4, 0x80, 0x2
	.byte 0xFF, 0x5A, 0x14, 0x0, 0x0, 0x0, 0x0, 0x35, 0x8, 0x1, 0x27, 0xFF
	.byte 0x8, 0x4, 0x7, 0x14, 0x29, 0xD2, 0x8, 0x8, 0x9, 0x8, 0x2, 0x2
	.byte 0xFF, 0x3C, 0x54, 0x0, 0x76, 0xD1, 0x8, 0x8, 0x8, 0x2, 0xFF, 0x1E
	.byte 0x3A, 0xFF, 0x2, 0x4, 0x80, 0x2, 0xFF, 0x1E, 0x35, 0x8, 0x3, 0x9
	.byte 0x8, 0x4, 0x2, 0xFF, 0x1E, 0x3A, 0xFF, 0x5, 0x4, 0x80, 0x2, 0xFF
	.byte 0x3C, 0x14, 0x0, 0x0, 0x0, 0x0, 0x27, 0xFF, 0xC, 0x4, 0x7, 0x50
	.byte 0x8, 0x1F, 0x2, 0xFF, 0xD2, 0x4B, 0x5D, 0xD2, 0x8, 0x8, 0x40, 0x4
	.byte 0xFF, 0x4, 0x47, 0x0, 0xFF, 0x4, 0x41, 0x0, 0xFF, 0x1, 0x0, 0x0
	.byte 0x0, 0x0, 0x0, 0x0, 0x3F, 0x30, 0x29, 0xFF, 0x3, 0xA, 0x53, 0xFF
	.byte 0x1, 0x28, 0xFF, 0xFF, 0x4C, 0x0, 0x0, 0x4C, 0xD2, 0x8, 0x8, 0x3B
	.byte 0x3F, 0x18, 0x3F, 0x4, 0x0, 0x3C, 0x0, 0x40, 0x15, 0xE9, 0xD1, 0x8
	.byte 0x8, 0x3C, 0x0, 0x40, 0x37, 0xFC, 0x48, 0x3, 0x8, 0x27, 0xFF, 0x18
	.byte 0xFF, 0x7, 0x2, 0xFF, 0x1, 0x27, 0xFF, 0xC, 0x8, 0x7, 0x15, 0xE9
	.byte 0xD1, 0x8, 0x8, 0x0, 0x1, 0x1, 0x0, 0x4, 0x0, 0x0, 0x0, 0x0
	.byte 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0
	thumb_func_end sub_808D11C

	thumb_local_start
sub_808D25C:
	push {lr}
	bl sub_8048F88
	mov r0, #0
	// <endpool> <endfile>
	pop {pc}
	thumb_func_end sub_808D25C

/*For debugging purposes, connect comment at any range!*/
